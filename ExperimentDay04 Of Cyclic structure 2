7-1 求特殊方程的正整数解
分数 15
作者 张彤彧
单位 浙江大学
本题要求对任意给定的正整数N，求方程X 
2
 +Y 
2
 =N的全部正整数解。

输入格式：
输入在一行中给出正整数N（≤10000）。

输出格式：
输出方程X 
2
 +Y 
2
 =N的全部正整数解，其中X≤Y。每组解占1行，两数字间以1空格分隔，按X的递增顺序输出。如果没有解，则输出No Solution。

输入样例1：
884
输出样例1：
10 28
20 22
输入样例2：
11
输出样例2：
No Solution


#include<stdio.h>
int main(){
    int N,X,Y,count=0;
    scanf("%d",&N);
    for(X=1; X<100; X++){
        for(Y=X; Y<100; Y++){
            if(X*X+Y*Y == N){
                printf("%d %d\n",X,Y);
                count++;
                break;
            }
        }
    }
    if(count==0){
        printf("No Solution");
    }
    return 0;
}



7-2 求符合给定条件的整数集
分数 15
作者 徐镜春
单位 浙江大学
给定不超过6的正整数A，考虑从A开始的连续4个数字。请输出所有由它们组成的无重复数字的3位数。

输入格式：
输入在一行中给出A。

输出格式：
输出满足条件的的3位数，要求从小到大，每行6个整数。整数间以空格分隔，但行末不能有多余空格。

输入样例：
2
输出样例：
234 235 243 245 253 254
324 325 342 345 352 354
423 425 432 435 452 453
523 524 532 534 542 543


#include<stdio.h>
int main(){
    //定义A,计数器
    int A,count=0;
    scanf("%d",&A);
    for(int i=A; i<=A+3; i++){
        for(int j=A; j<=A+3; j++){
            for(int p=A; p<=A+3; p++){
                if(i!=j && i!=p && j!=p){
                    int num = i*100+j*10+p;
                    if(count<5){ 
                        printf("%d ",num);
                        count++;
                    }else if(count==5){ 
                        printf("%d",num);
                        printf("\n");
                        count=0;
                    }
                }
            }
        }
    }
    return 0;
}



7-3 打印九九口诀表
分数 15
作者 徐镜春
单位 浙江大学
下面是一个完整的下三角九九口诀表：

1*1=1   
1*2=2   2*2=4   
1*3=3   2*3=6   3*3=9   
1*4=4   2*4=8   3*4=12  4*4=16  
1*5=5   2*5=10  3*5=15  4*5=20  5*5=25  
1*6=6   2*6=12  3*6=18  4*6=24  5*6=30  6*6=36  
1*7=7   2*7=14  3*7=21  4*7=28  5*7=35  6*7=42  7*7=49  
1*8=8   2*8=16  3*8=24  4*8=32  5*8=40  6*8=48  7*8=56  8*8=64  
1*9=9   2*9=18  3*9=27  4*9=36  5*9=45  6*9=54  7*9=63  8*9=72  9*9=81  
本题要求对任意给定的一位正整数N，输出从1*1到N*N的部分口诀表。

输入格式：
输入在一行中给出一个正整数N（1≤N≤9）。

输出格式：
输出下三角N*N部分口诀表，其中等号右边数字占4位、左对齐。

输入样例：
4
输出样例：
1*1=1   
1*2=2   2*2=4   
1*3=3   2*3=6   3*3=9   
1*4=4   2*4=8   3*4=12  4*4=16  


#include<stdio.h>
int main(){
    int N;
    //键盘输入N的值
    scanf("%d",&N);
    for(int i=1; i<=N; i++){
        for(int j=1; j<=i; j++){
            printf("%d*%d=%-4d",j,i,i*j);
        }
        if(i == N){
             ;
       }else{
            printf("\n");
        }      
    }
    return 0;
}


7-4 打印菱形图案
分数 15
作者 C课程组
单位 浙江大学
本题要求编写程序，打印一个高度为n的、由“*”组成的正菱形图案。

输入格式:
输入在一行中给出一个正的奇数n。

输出格式:
输出由n行星号“*”组成的菱形，如样例所示。每个星号后跟一个空格。

输入样例:
7
输出样例:
      * 
    * * * 
  * * * * * 
* * * * * * * 
  * * * * * 
    * * * 
      * 
      
      
      #include <stdio.h>
 
int main()
{
    //定义高度n
    int i,j,n;
    scanf("%d",&n);
    //  求出中间一行的行数
    int k=(n+1)/2;
    /*
    第一步：先把上面几行的*号打印出来
    第二步：只需要将上面的大循环改变一下行数就行，就可以把下面几行打印出来
    */
    for(i=1;i<=k;i++){
        //计算出前面的空格数
        for(j=1;j<=n-2*i+1;j++){
            printf(" ");
        }
        //算法计算出这行需要打印的*号
        for(j=1;j<=2*i-1;j++){
            printf("* ");
        }
        printf("\n");
    }
    for(i=n-k;i>=1;i--){
        //计算出前面的空格数
        for(j=1;j<=n-2*i+1;j++){
            printf(" ");
        }
        //算法计算出这行需要打印的*号
        for(j=1;j<=2*i-1;j++){
            printf("* ");
        }
        printf("\n");
    }
    
    return 0;
}


7-5 约分最简分式
分数 15
作者 翁恺
单位 浙江大学
分数可以表示为分子/分母的形式。编写一个程序，要求用户输入一个分数，然后将其约分为最简分式。最简分式是指分子和分母不具有可以约分的成分了。如6/12可以被约分为1/2。当分子大于分母时，不需要表达为整数又分数的形式，即11/8还是11/8；而当分子分母相等时，仍然表达为1/1的分数形式。

输入格式：
输入在一行中给出一个分数，分子和分母中间以斜杠/分隔，如：12/34表示34分之12。分子和分母都是正整数（不包含0，如果不清楚正整数的定义的话）。

提示：

对于C语言，在scanf的格式字符串中加入/，让scanf来处理这个斜杠。
对于Python语言，用a,b=map(int, input().split('/'))这样的代码来处理这个斜杠。
输出格式：
在一行中输出这个分数对应的最简分式，格式与输入的相同，即采用分子/分母的形式表示分数。如
5/6表示6分之5。

输入样例：
66/120
输出样例：
11/20

#include<stdio.h>
int main(){
    //定义分子，分母
    int fenZi,fenMu;
    //定义分子分母的最大公约数
    int num;
    //键盘输入分子分母
    scanf("%d/%d",&fenZi,&fenMu);
    if(fenZi>fenMu){
        for(int i=fenMu; i>0; i--){
            if(fenMu%i==0 && fenZi%i==0){
                num=i;
                break;
            }
        }
    }else if(fenZi<fenMu){
        for(int i=fenZi; i>0; i--){ 
            if(fenZi%i==0 && fenMu%i==0){
                num=i;
                break;
            }
        }
    }else if(fenZi==fenMu){
        num=fenZi;
    }
    fenZi=fenZi/num;
    fenMu=fenMu/num;
    printf("%d/%d",fenZi,fenMu);
    return 0;
}
